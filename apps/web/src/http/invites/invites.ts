/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * squd_in
 * Full-stack SaaS with multi-tenant & RBAC.
 * OpenAPI spec version: 0.0.1
 */
import type {
  AcceptInvite204,
  CreateInvite201,
  CreateInviteBody,
  GetInvites200,
  GetInvitesDetails200,
  GetPendingInvites200,
  RejectInvite204,
  RevokeInvite204,
} from '../api.schemas'

import { fetcher } from '../../lib/fetcher'

/**
 * @summary Get an invite details
 */
export type getInvitesDetailsResponse200 = {
  data: GetInvitesDetails200
  status: 200
}

export type getInvitesDetailsResponseComposite = getInvitesDetailsResponse200

export type getInvitesDetailsResponse = getInvitesDetailsResponseComposite & {
  headers: Headers
}

export const getGetInvitesDetailsUrl = (inviteId: string) => {
  return `http://localhost:3333/invites/${inviteId}`
}

export const getInvitesDetails = async (
  inviteId: string,
  options?: RequestInit
): Promise<getInvitesDetailsResponse> => {
  return fetcher<getInvitesDetailsResponse>(getGetInvitesDetailsUrl(inviteId), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Get all invites in a organization
 */
export type getInvitesResponse200 = {
  data: GetInvites200
  status: 200
}

export type getInvitesResponseComposite = getInvitesResponse200

export type getInvitesResponse = getInvitesResponseComposite & {
  headers: Headers
}

export const getGetInvitesUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/invites`
}

export const getInvites = async (
  slug: string,
  options?: RequestInit
): Promise<getInvitesResponse> => {
  return fetcher<getInvitesResponse>(getGetInvitesUrl(slug), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Create a new invite
 */
export type createInviteResponse201 = {
  data: CreateInvite201
  status: 201
}

export type createInviteResponseComposite = createInviteResponse201

export type createInviteResponse = createInviteResponseComposite & {
  headers: Headers
}

export const getCreateInviteUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/invites`
}

export const createInvite = async (
  slug: string,
  createInviteBody: CreateInviteBody,
  options?: RequestInit
): Promise<createInviteResponse> => {
  return fetcher<createInviteResponse>(getCreateInviteUrl(slug), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createInviteBody),
  })
}

/**
 * @summary Get all user pending invites
 */
export type getPendingInvitesResponse200 = {
  data: GetPendingInvites200
  status: 200
}

export type getPendingInvitesResponseComposite = getPendingInvitesResponse200

export type getPendingInvitesResponse = getPendingInvitesResponseComposite & {
  headers: Headers
}

export const getGetPendingInvitesUrl = () => {
  return `http://localhost:3333/pending-invites`
}

export const getPendingInvites = async (
  options?: RequestInit
): Promise<getPendingInvitesResponse> => {
  return fetcher<getPendingInvitesResponse>(getGetPendingInvitesUrl(), {
    ...options,
    method: 'POST',
  })
}

/**
 * @summary Accept an invite
 */
export type acceptInviteResponse204 = {
  data: AcceptInvite204
  status: 204
}

export type acceptInviteResponseComposite = acceptInviteResponse204

export type acceptInviteResponse = acceptInviteResponseComposite & {
  headers: Headers
}

export const getAcceptInviteUrl = (inviteId: string) => {
  return `http://localhost:3333/invites/${inviteId}/accept`
}

export const acceptInvite = async (
  inviteId: string,
  options?: RequestInit
): Promise<acceptInviteResponse> => {
  return fetcher<acceptInviteResponse>(getAcceptInviteUrl(inviteId), {
    ...options,
    method: 'POST',
  })
}

/**
 * @summary Accept an invite
 */
export type rejectInviteResponse204 = {
  data: RejectInvite204
  status: 204
}

export type rejectInviteResponseComposite = rejectInviteResponse204

export type rejectInviteResponse = rejectInviteResponseComposite & {
  headers: Headers
}

export const getRejectInviteUrl = (inviteId: string) => {
  return `http://localhost:3333/invites/${inviteId}/reject`
}

export const rejectInvite = async (
  inviteId: string,
  options?: RequestInit
): Promise<rejectInviteResponse> => {
  return fetcher<rejectInviteResponse>(getRejectInviteUrl(inviteId), {
    ...options,
    method: 'POST',
  })
}

/**
 * @summary Revoke a invite
 */
export type revokeInviteResponse204 = {
  data: RevokeInvite204
  status: 204
}

export type revokeInviteResponseComposite = revokeInviteResponse204

export type revokeInviteResponse = revokeInviteResponseComposite & {
  headers: Headers
}

export const getRevokeInviteUrl = (slug: string, inviteId: string) => {
  return `http://localhost:3333/organizations/${slug}/invites/${inviteId}`
}

export const revokeInvite = async (
  slug: string,
  inviteId: string,
  options?: RequestInit
): Promise<revokeInviteResponse> => {
  return fetcher<revokeInviteResponse>(getRevokeInviteUrl(slug, inviteId), {
    ...options,
    method: 'POST',
  })
}
