/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * squd_in
 * Full-stack SaaS with multi-tenant & RBAC.
 * OpenAPI spec version: 0.0.1
 */
import type {
  CreateProject201,
  CreateProjectBody,
  DeleteProject204,
  GetProjectDetails200,
  GetProjects200,
  UpdateProject204,
  UpdateProjectBody,
} from '../api.schemas'

import { fetcher } from '../../lib/fetcher'

/**
 * @summary Get Project Details
 */
export type getProjectDetailsResponse200 = {
  data: GetProjectDetails200
  status: 200
}

export type getProjectDetailsResponseComposite = getProjectDetailsResponse200

export type getProjectDetailsResponse = getProjectDetailsResponseComposite & {
  headers: Headers
}

export const getGetProjectDetailsUrl = (
  orgSlug: string,
  projectSlug: string
) => {
  return `http://localhost:3333/organizations/${orgSlug}/projects/${projectSlug}`
}

export const getProjectDetails = async (
  orgSlug: string,
  projectSlug: string,
  options?: RequestInit
): Promise<getProjectDetailsResponse> => {
  return fetcher<getProjectDetailsResponse>(
    getGetProjectDetailsUrl(orgSlug, projectSlug),
    {
      ...options,
      method: 'GET',
    }
  )
}

/**
 * @summary Get all organization projects
 */
export type getProjectsResponse200 = {
  data: GetProjects200
  status: 200
}

export type getProjectsResponseComposite = getProjectsResponse200

export type getProjectsResponse = getProjectsResponseComposite & {
  headers: Headers
}

export const getGetProjectsUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/projects`
}

export const getProjects = async (
  slug: string,
  options?: RequestInit
): Promise<getProjectsResponse> => {
  return fetcher<getProjectsResponse>(getGetProjectsUrl(slug), {
    ...options,
    method: 'GET',
  })
}

/**
 * @summary Create a new project in a organization
 */
export type createProjectResponse201 = {
  data: CreateProject201
  status: 201
}

export type createProjectResponseComposite = createProjectResponse201

export type createProjectResponse = createProjectResponseComposite & {
  headers: Headers
}

export const getCreateProjectUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/projects`
}

export const createProject = async (
  slug: string,
  createProjectBody: CreateProjectBody,
  options?: RequestInit
): Promise<createProjectResponse> => {
  return fetcher<createProjectResponse>(getCreateProjectUrl(slug), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createProjectBody),
  })
}

/**
 * @summary Delete a project
 */
export type updateProjectResponse204 = {
  data: UpdateProject204
  status: 204
}

export type updateProjectResponseComposite = updateProjectResponse204

export type updateProjectResponse = updateProjectResponseComposite & {
  headers: Headers
}

export const getUpdateProjectUrl = (slug: string, projectId: string) => {
  return `http://localhost:3333/organizations/${slug}/projects/${projectId}`
}

export const updateProject = async (
  slug: string,
  projectId: string,
  updateProjectBody: UpdateProjectBody,
  options?: RequestInit
): Promise<updateProjectResponse> => {
  return fetcher<updateProjectResponse>(getUpdateProjectUrl(slug, projectId), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateProjectBody),
  })
}

/**
 * @summary Delete a project
 */
export type deleteProjectResponse204 = {
  data: DeleteProject204
  status: 204
}

export type deleteProjectResponseComposite = deleteProjectResponse204

export type deleteProjectResponse = deleteProjectResponseComposite & {
  headers: Headers
}

export const getDeleteProjectUrl = (slug: string, projectId: string) => {
  return `http://localhost:3333/organizations/${slug}/projects/${projectId}`
}

export const deleteProject = async (
  slug: string,
  projectId: string,
  options?: RequestInit
): Promise<deleteProjectResponse> => {
  return fetcher<deleteProjectResponse>(getDeleteProjectUrl(slug, projectId), {
    ...options,
    method: 'DELETE',
  })
}
