/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * squd_in
 * Full-stack SaaS with multi-tenant & RBAC.
 * OpenAPI spec version: 0.0.1
 */
export type CreateAccountBody = {
  name: string
  email: string
  /** @minLength 8 */
  password: string
}

/**
 * @nullable
 */
export type CreateAccount201 =
  | (typeof CreateAccount201)[keyof typeof CreateAccount201]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAccount201 = {
  null: 'null',
} as const

export type AuthenticateWithPasswordBody = {
  email: string
  password: string
}

export type AuthenticateWithPassword201 = {
  token: string
}

export type AuthenticateWithGithubBody = {
  code: string
}

export type AuthenticateWithGithub201 = {
  token: string
}

export type RequestPasswordRecoverBody = {
  email: string
}

/**
 * @nullable
 */
export type RequestPasswordRecover201 =
  | (typeof RequestPasswordRecover201)[keyof typeof RequestPasswordRecover201]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RequestPasswordRecover201 = {
  null: 'null',
} as const

export type ResetPasswordBody = {
  code: string
  /** @minLength 8 */
  password: string
}

/**
 * @nullable
 */
export type ResetPassword204 =
  | (typeof ResetPassword204)[keyof typeof ResetPassword204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResetPassword204 = {
  null: 'null',
} as const

export type GetProfile200User = {
  id: string
  /** @nullable */
  name: string | null
  email: string
  /** @nullable */
  avatarUrl: string | null
}

export type GetProfile200 = {
  user: GetProfile200User
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetMembership200MembershipRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  BILLING: 'BILLING',
} as const
export type GetMembership200Membership = {
  id: string
  organizationId: string
  role: (typeof GetMembership200MembershipRole)[keyof typeof GetMembership200MembershipRole]
}

export type GetMembership200 = {
  membership: GetMembership200Membership
}

export type GetOrganizationDetails200Organization = {
  id: string
  name: string
  slug: string
  /** @nullable */
  domain: string | null
  shouldAttachUsersByDomain: boolean
  /** @nullable */
  avatarUrl: string | null
  createdAt: string
  updatedAt: string
  ownerId: string
}

export type GetOrganizationDetails200 = {
  organization: GetOrganizationDetails200Organization
}

export type UpdateOrganizationBody = {
  name: string
  /** @nullable */
  domain?: string | null
  shouldAttachUsersByDomain?: boolean
}

/**
 * @nullable
 */
export type UpdateOrganization204 =
  | (typeof UpdateOrganization204)[keyof typeof UpdateOrganization204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateOrganization204 = {
  null: 'null',
} as const

/**
 * @nullable
 */
export type ShutdownOrganization204 =
  | (typeof ShutdownOrganization204)[keyof typeof ShutdownOrganization204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ShutdownOrganization204 = {
  null: 'null',
} as const

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrganizations200OrganizationsItemRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  BILLING: 'BILLING',
} as const
export type GetOrganizations200OrganizationsItem = {
  id: string
  name: string
  slug: string
  /** @nullable */
  avatarUrl: string | null
  role: (typeof GetOrganizations200OrganizationsItemRole)[keyof typeof GetOrganizations200OrganizationsItemRole]
}

export type GetOrganizations200 = {
  organizations: GetOrganizations200OrganizationsItem[]
}

export type CreateOrganizationBody = {
  name: string
  /** @nullable */
  domain?: string | null
  shouldAttachUsersByDomain?: boolean
}

export type CreateOrganization201 = {
  organizationId: string
}

export type TransferOrganizationBody = {
  transferToUserId: string
}

/**
 * @nullable
 */
export type TransferOrganization204 =
  | (typeof TransferOrganization204)[keyof typeof TransferOrganization204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransferOrganization204 = {
  null: 'null',
} as const

export type GetProjectDetails200ProjectOwner = {
  id: string
  /** @nullable */
  name: string | null
  /** @nullable */
  avatarUrl: string | null
}

export type GetProjectDetails200Project = {
  id: string
  description: string
  name: string
  slug: string
  /** @nullable */
  avatarUrl: string | null
  organizationId: string
  ownerId: string
  owner: GetProjectDetails200ProjectOwner
}

export type GetProjectDetails200 = {
  project: GetProjectDetails200Project
}

export type GetProjects200ProjectsItemOwner = {
  id: string
  /** @nullable */
  name: string | null
  /** @nullable */
  avatarUrl: string | null
}

export type GetProjects200ProjectsItem = {
  id: string
  description: string
  name: string
  slug: string
  /** @nullable */
  avatarUrl: string | null
  organizationId: string
  ownerId: string
  createdAt: string
  owner: GetProjects200ProjectsItemOwner
}

export type GetProjects200 = {
  projects: GetProjects200ProjectsItem[]
}

export type CreateProjectBody = {
  name: string
  description: string
}

export type CreateProject201 = {
  projectId: string
}

export type UpdateProjectBody = {
  name: string
  description: string
}

/**
 * @nullable
 */
export type UpdateProject204 =
  | (typeof UpdateProject204)[keyof typeof UpdateProject204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateProject204 = {
  null: 'null',
} as const

/**
 * @nullable
 */
export type DeleteProject204 =
  | (typeof DeleteProject204)[keyof typeof DeleteProject204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteProject204 = {
  null: 'null',
} as const

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrganizationMembers200MembersItemRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  BILLING: 'BILLING',
} as const
export type GetOrganizationMembers200MembersItem = {
  id: string
  userId: string
  role: (typeof GetOrganizationMembers200MembersItemRole)[keyof typeof GetOrganizationMembers200MembersItemRole]
  /** @nullable */
  name: string | null
  email: string
  /** @nullable */
  avatarUrl: string | null
}

export type GetOrganizationMembers200 = {
  members: GetOrganizationMembers200MembersItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMemberBodyRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  BILLING: 'BILLING',
} as const
export type UpdateMemberBody = {
  role: (typeof UpdateMemberBodyRole)[keyof typeof UpdateMemberBodyRole]
}

/**
 * @nullable
 */
export type UpdateMember204 =
  | (typeof UpdateMember204)[keyof typeof UpdateMember204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMember204 = {
  null: 'null',
} as const

/**
 * @nullable
 */
export type RemoveMember204 =
  | (typeof RemoveMember204)[keyof typeof RemoveMember204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemoveMember204 = {
  null: 'null',
} as const

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvitesDetails200InviteRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  BILLING: 'BILLING',
} as const
export type GetInvitesDetails200InviteOrganization = {
  name: string
}

/**
 * @nullable
 */
export type GetInvitesDetails200InviteAuthor = {
  id: string
  /** @nullable */
  name: string | null
  /** @nullable */
  avatarUrl: string | null
} | null

export type GetInvitesDetails200Invite = {
  id: string
  role: (typeof GetInvitesDetails200InviteRole)[keyof typeof GetInvitesDetails200InviteRole]
  email: string
  createdAt: string
  organization: GetInvitesDetails200InviteOrganization
  /** @nullable */
  author: GetInvitesDetails200InviteAuthor
}

export type GetInvitesDetails200 = {
  invite: GetInvitesDetails200Invite
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetInvites200InvitesItemRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  BILLING: 'BILLING',
} as const
/**
 * @nullable
 */
export type GetInvites200InvitesItemAuthor = {
  id: string
  /** @nullable */
  name: string | null
} | null

export type GetInvites200InvitesItem = {
  id: string
  role: (typeof GetInvites200InvitesItemRole)[keyof typeof GetInvites200InvitesItemRole]
  email: string
  createdAt: string
  /** @nullable */
  author: GetInvites200InvitesItemAuthor
}

export type GetInvites200 = {
  invites: GetInvites200InvitesItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInviteBodyRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  BILLING: 'BILLING',
} as const
export type CreateInviteBody = {
  email: string
  role: (typeof CreateInviteBodyRole)[keyof typeof CreateInviteBodyRole]
}

export type CreateInvite201 = {
  inviteId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPendingInvites200InvitesItemRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  BILLING: 'BILLING',
} as const
export type GetPendingInvites200InvitesItemOrganization = {
  name: string
}

/**
 * @nullable
 */
export type GetPendingInvites200InvitesItemAuthor = {
  id: string
  /** @nullable */
  name: string | null
  /** @nullable */
  avatarUrl: string | null
} | null

export type GetPendingInvites200InvitesItem = {
  id: string
  role: (typeof GetPendingInvites200InvitesItemRole)[keyof typeof GetPendingInvites200InvitesItemRole]
  email: string
  createdAt: string
  organization: GetPendingInvites200InvitesItemOrganization
  /** @nullable */
  author: GetPendingInvites200InvitesItemAuthor
}

export type GetPendingInvites200 = {
  invites: GetPendingInvites200InvitesItem[]
}

/**
 * @nullable
 */
export type AcceptInvite204 =
  | (typeof AcceptInvite204)[keyof typeof AcceptInvite204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcceptInvite204 = {
  null: 'null',
} as const

/**
 * @nullable
 */
export type RejectInvite204 =
  | (typeof RejectInvite204)[keyof typeof RejectInvite204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RejectInvite204 = {
  null: 'null',
} as const

/**
 * @nullable
 */
export type RevokeInvite204 =
  | (typeof RevokeInvite204)[keyof typeof RevokeInvite204]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RevokeInvite204 = {
  null: 'null',
} as const

export type GetOrganizationBilling200BillingSeats = {
  amount: number
  unit: number
  price: number
}

export type GetOrganizationBilling200BillingProjects = {
  amount: number
  unit: number
  price: number
}

export type GetOrganizationBilling200Billing = {
  seats: GetOrganizationBilling200BillingSeats
  projects: GetOrganizationBilling200BillingProjects
  total: number
}

export type GetOrganizationBilling200 = {
  billing: GetOrganizationBilling200Billing
}

/**
 * @summary Create a new user account
 */
export const getCreateAccountUrl = () => {
  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
  return `http://localhost:3333/user`
}

export const createAccount = async (
  createAccountBody: CreateAccountBody,
  options?: RequestInit
): Promise<CreateAccount201> => {
  const res = await fetch(getCreateAccountUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createAccountBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: CreateAccount201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Authenticate with e-mail and password
 */
export const getAuthenticateWithPasswordUrl = () => {
  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
  return `http://localhost:3333/sessions/password`
}

export const authenticateWithPassword = async (
  authenticateWithPasswordBody: AuthenticateWithPasswordBody,
  options?: RequestInit
): Promise<AuthenticateWithPassword201> => {
  const res = await fetch(getAuthenticateWithPasswordUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(authenticateWithPasswordBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: AuthenticateWithPassword201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Authenticate with github
 */
export const getAuthenticateWithGithubUrl = () => {
  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
  return `http://localhost:3333/sessions/github`
}

export const authenticateWithGithub = async (
  authenticateWithGithubBody: AuthenticateWithGithubBody,
  options?: RequestInit
): Promise<AuthenticateWithGithub201> => {
  const res = await fetch(getAuthenticateWithGithubUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(authenticateWithGithubBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: AuthenticateWithGithub201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * Request password recover
 */
export const getRequestPasswordRecoverUrl = () => {
  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
  return `http://localhost:3333/password/recover`
}

export const requestPasswordRecover = async (
  requestPasswordRecoverBody: RequestPasswordRecoverBody,
  options?: RequestInit
): Promise<RequestPasswordRecover201> => {
  const res = await fetch(getRequestPasswordRecoverUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestPasswordRecoverBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: RequestPasswordRecover201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * Reset password
 */
export const getResetPasswordUrl = () => {
  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
  return `http://localhost:3333/password/reset`
}

export const resetPassword = async (
  resetPasswordBody: ResetPasswordBody,
  options?: RequestInit
): Promise<ResetPassword204> => {
  const res = await fetch(getResetPasswordUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(resetPasswordBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: ResetPassword204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get authenticated user profile
 */
export const getGetProfileUrl = () => {
  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
  return `http://localhost:3333/profile`
}

export const getProfile = async (
  options?: RequestInit
): Promise<GetProfile200> => {
  const res = await fetch(getGetProfileUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetProfile200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get organization membership on organization
 */
export const getGetMembershipUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/membership`
}

export const getMembership = async (
  slug: string,
  options?: RequestInit
): Promise<GetMembership200> => {
  const res = await fetch(getGetMembershipUrl(slug), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetMembership200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get details of an organization
 */
export const getGetOrganizationDetailsUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}`
}

export const getOrganizationDetails = async (
  slug: string,
  options?: RequestInit
): Promise<GetOrganizationDetails200> => {
  const res = await fetch(getGetOrganizationDetailsUrl(slug), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetOrganizationDetails200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Update organization details
 */
export const getUpdateOrganizationUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}`
}

export const updateOrganization = async (
  slug: string,
  updateOrganizationBody: UpdateOrganizationBody,
  options?: RequestInit
): Promise<UpdateOrganization204> => {
  const res = await fetch(getUpdateOrganizationUrl(slug), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateOrganizationBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: UpdateOrganization204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Shutdown organization
 */
export const getShutdownOrganizationUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}`
}

export const shutdownOrganization = async (
  slug: string,
  options?: RequestInit
): Promise<ShutdownOrganization204> => {
  const res = await fetch(getShutdownOrganizationUrl(slug), {
    ...options,
    method: 'DELETE',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: ShutdownOrganization204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get organizations where user is a member
 */
export const getGetOrganizationsUrl = () => {
  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
  return `http://localhost:3333/organizations`
}

export const getOrganizations = async (
  options?: RequestInit
): Promise<GetOrganizations200> => {
  const res = await fetch(getGetOrganizationsUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetOrganizations200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Create a new organization
 */
export const getCreateOrganizationUrl = () => {
  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
  return `http://localhost:3333/organizations`
}

export const createOrganization = async (
  createOrganizationBody: CreateOrganizationBody,
  options?: RequestInit
): Promise<CreateOrganization201> => {
  const res = await fetch(getCreateOrganizationUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createOrganizationBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: CreateOrganization201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Transfer organization ownership
 */
export const getTransferOrganizationUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/owner`
}

export const transferOrganization = async (
  slug: string,
  transferOrganizationBody: TransferOrganizationBody,
  options?: RequestInit
): Promise<TransferOrganization204> => {
  const res = await fetch(getTransferOrganizationUrl(slug), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(transferOrganizationBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: TransferOrganization204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get Project Details
 */
export const getGetProjectDetailsUrl = (
  orgSlug: string,
  projectSlug: string
) => {
  return `http://localhost:3333/organizations/${orgSlug}/projects/${projectSlug}`
}

export const getProjectDetails = async (
  orgSlug: string,
  projectSlug: string,
  options?: RequestInit
): Promise<GetProjectDetails200> => {
  const res = await fetch(getGetProjectDetailsUrl(orgSlug, projectSlug), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetProjectDetails200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get all organization projects
 */
export const getGetProjectsUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/projects`
}

export const getProjects = async (
  slug: string,
  options?: RequestInit
): Promise<GetProjects200> => {
  const res = await fetch(getGetProjectsUrl(slug), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetProjects200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Create a new project in a organization
 */
export const getCreateProjectUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/projects`
}

export const createProject = async (
  slug: string,
  createProjectBody: CreateProjectBody,
  options?: RequestInit
): Promise<CreateProject201> => {
  const res = await fetch(getCreateProjectUrl(slug), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createProjectBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: CreateProject201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Delete a project
 */
export const getUpdateProjectUrl = (slug: string, projectId: string) => {
  return `http://localhost:3333/organizations/${slug}/projects/${projectId}`
}

export const updateProject = async (
  slug: string,
  projectId: string,
  updateProjectBody: UpdateProjectBody,
  options?: RequestInit
): Promise<UpdateProject204> => {
  const res = await fetch(getUpdateProjectUrl(slug, projectId), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateProjectBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: UpdateProject204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Delete a project
 */
export const getDeleteProjectUrl = (slug: string, projectId: string) => {
  return `http://localhost:3333/organizations/${slug}/projects/${projectId}`
}

export const deleteProject = async (
  slug: string,
  projectId: string,
  options?: RequestInit
): Promise<DeleteProject204> => {
  const res = await fetch(getDeleteProjectUrl(slug, projectId), {
    ...options,
    method: 'DELETE',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: DeleteProject204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get all members in a organization
 */
export const getGetOrganizationMembersUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/members`
}

export const getOrganizationMembers = async (
  slug: string,
  options?: RequestInit
): Promise<GetOrganizationMembers200> => {
  const res = await fetch(getGetOrganizationMembersUrl(slug), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetOrganizationMembers200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Update a member infos
 */
export const getUpdateMemberUrl = (slug: string, memberId: string) => {
  return `http://localhost:3333/organizations/${slug}/members/${memberId}`
}

export const updateMember = async (
  slug: string,
  memberId: string,
  updateMemberBody: UpdateMemberBody,
  options?: RequestInit
): Promise<UpdateMember204> => {
  const res = await fetch(getUpdateMemberUrl(slug, memberId), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateMemberBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: UpdateMember204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Remove a member in a organization
 */
export const getRemoveMemberUrl = (slug: string, memberId: string) => {
  return `http://localhost:3333/organizations/${slug}/members/${memberId}`
}

export const removeMember = async (
  slug: string,
  memberId: string,
  options?: RequestInit
): Promise<RemoveMember204> => {
  const res = await fetch(getRemoveMemberUrl(slug, memberId), {
    ...options,
    method: 'DELETE',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: RemoveMember204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get an invite details
 */
export const getGetInvitesDetailsUrl = (inviteId: string) => {
  return `http://localhost:3333/invites/${inviteId}`
}

export const getInvitesDetails = async (
  inviteId: string,
  options?: RequestInit
): Promise<GetInvitesDetails200> => {
  const res = await fetch(getGetInvitesDetailsUrl(inviteId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetInvitesDetails200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get all invites in a organization
 */
export const getGetInvitesUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/invites`
}

export const getInvites = async (
  slug: string,
  options?: RequestInit
): Promise<GetInvites200> => {
  const res = await fetch(getGetInvitesUrl(slug), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetInvites200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Create a new invite
 */
export const getCreateInviteUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/invites`
}

export const createInvite = async (
  slug: string,
  createInviteBody: CreateInviteBody,
  options?: RequestInit
): Promise<CreateInvite201> => {
  const res = await fetch(getCreateInviteUrl(slug), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createInviteBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: CreateInvite201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get all user pending invites
 */
export const getGetPendingInvitesUrl = () => {
  // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
  return `http://localhost:3333/pending-invites`
}

export const getPendingInvites = async (
  options?: RequestInit
): Promise<GetPendingInvites200> => {
  const res = await fetch(getGetPendingInvitesUrl(), {
    ...options,
    method: 'POST',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetPendingInvites200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Accept an invite
 */
export const getAcceptInviteUrl = (inviteId: string) => {
  return `http://localhost:3333/invites/${inviteId}/accept`
}

export const acceptInvite = async (
  inviteId: string,
  options?: RequestInit
): Promise<AcceptInvite204> => {
  const res = await fetch(getAcceptInviteUrl(inviteId), {
    ...options,
    method: 'POST',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: AcceptInvite204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Accept an invite
 */
export const getRejectInviteUrl = (inviteId: string) => {
  return `http://localhost:3333/invites/${inviteId}/reject`
}

export const rejectInvite = async (
  inviteId: string,
  options?: RequestInit
): Promise<RejectInvite204> => {
  const res = await fetch(getRejectInviteUrl(inviteId), {
    ...options,
    method: 'POST',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: RejectInvite204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Revoke a invite
 */
export const getRevokeInviteUrl = (slug: string, inviteId: string) => {
  return `http://localhost:3333/organizations/${slug}/invites/${inviteId}`
}

export const revokeInvite = async (
  slug: string,
  inviteId: string,
  options?: RequestInit
): Promise<RevokeInvite204> => {
  const res = await fetch(getRevokeInviteUrl(slug, inviteId), {
    ...options,
    method: 'POST',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: RevokeInvite204 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get billing information for an organization
 */
export const getGetOrganizationBillingUrl = (slug: string) => {
  return `http://localhost:3333/organizations/${slug}/billing`
}

export const getOrganizationBilling = async (
  slug: string,
  options?: RequestInit
): Promise<GetOrganizationBilling200> => {
  const res = await fetch(getGetOrganizationBillingUrl(slug), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetOrganizationBilling200 = body ? JSON.parse(body) : {}

  return data
}
