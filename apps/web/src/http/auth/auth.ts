/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * squd_in
 * Full-stack SaaS with multi-tenant & RBAC.
 * OpenAPI spec version: 0.0.1
 */
import type {
  AuthenticateWithGithub201,
  AuthenticateWithGithubBody,
  AuthenticateWithPassword201,
  AuthenticateWithPasswordBody,
  CreateAccount201,
  CreateAccountBody,
  GetProfile200,
  RequestPasswordRecover201,
  RequestPasswordRecoverBody,
  ResetPassword204,
  ResetPasswordBody,
} from '../api.schemas'

import { fetcher } from '../../lib/fetcher'

/**
 * @summary Create a new user account
 */
export type createAccountResponse201 = {
  data: CreateAccount201
  status: 201
}

export type createAccountResponseComposite = createAccountResponse201

export type createAccountResponse = createAccountResponseComposite & {
  headers: Headers
}

export const getCreateAccountUrl = () => {
  return `http://localhost:3333/user`
}

export const createAccount = async (
  createAccountBody: CreateAccountBody,
  options?: RequestInit
): Promise<createAccountResponse> => {
  return fetcher<createAccountResponse>(getCreateAccountUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createAccountBody),
  })
}

/**
 * @summary Authenticate with e-mail and password
 */
export type authenticateWithPasswordResponse201 = {
  data: AuthenticateWithPassword201
  status: 201
}

export type authenticateWithPasswordResponseComposite =
  authenticateWithPasswordResponse201

export type authenticateWithPasswordResponse =
  authenticateWithPasswordResponseComposite & {
    headers: Headers
  }

export const getAuthenticateWithPasswordUrl = () => {
  return `http://localhost:3333/sessions/password`
}

export const authenticateWithPassword = async (
  authenticateWithPasswordBody: AuthenticateWithPasswordBody,
  options?: RequestInit
): Promise<authenticateWithPasswordResponse> => {
  return fetcher<authenticateWithPasswordResponse>(
    getAuthenticateWithPasswordUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(authenticateWithPasswordBody),
    }
  )
}

/**
 * @summary Authenticate with github
 */
export type authenticateWithGithubResponse201 = {
  data: AuthenticateWithGithub201
  status: 201
}

export type authenticateWithGithubResponseComposite =
  authenticateWithGithubResponse201

export type authenticateWithGithubResponse =
  authenticateWithGithubResponseComposite & {
    headers: Headers
  }

export const getAuthenticateWithGithubUrl = () => {
  return `http://localhost:3333/sessions/github`
}

export const authenticateWithGithub = async (
  authenticateWithGithubBody: AuthenticateWithGithubBody,
  options?: RequestInit
): Promise<authenticateWithGithubResponse> => {
  return fetcher<authenticateWithGithubResponse>(
    getAuthenticateWithGithubUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(authenticateWithGithubBody),
    }
  )
}

/**
 * Request password recover
 */
export type requestPasswordRecoverResponse201 = {
  data: RequestPasswordRecover201
  status: 201
}

export type requestPasswordRecoverResponseComposite =
  requestPasswordRecoverResponse201

export type requestPasswordRecoverResponse =
  requestPasswordRecoverResponseComposite & {
    headers: Headers
  }

export const getRequestPasswordRecoverUrl = () => {
  return `http://localhost:3333/password/recover`
}

export const requestPasswordRecover = async (
  requestPasswordRecoverBody: RequestPasswordRecoverBody,
  options?: RequestInit
): Promise<requestPasswordRecoverResponse> => {
  return fetcher<requestPasswordRecoverResponse>(
    getRequestPasswordRecoverUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(requestPasswordRecoverBody),
    }
  )
}

/**
 * Reset password
 */
export type resetPasswordResponse204 = {
  data: ResetPassword204
  status: 204
}

export type resetPasswordResponseComposite = resetPasswordResponse204

export type resetPasswordResponse = resetPasswordResponseComposite & {
  headers: Headers
}

export const getResetPasswordUrl = () => {
  return `http://localhost:3333/password/reset`
}

export const resetPassword = async (
  resetPasswordBody: ResetPasswordBody,
  options?: RequestInit
): Promise<resetPasswordResponse> => {
  return fetcher<resetPasswordResponse>(getResetPasswordUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(resetPasswordBody),
  })
}

/**
 * @summary Get authenticated user profile
 */
export type getProfileResponse200 = {
  data: GetProfile200
  status: 200
}

export type getProfileResponseComposite = getProfileResponse200

export type getProfileResponse = getProfileResponseComposite & {
  headers: Headers
}

export const getGetProfileUrl = () => {
  return `http://localhost:3333/profile`
}

export const getProfile = async (
  options?: RequestInit
): Promise<getProfileResponse> => {
  return fetcher<getProfileResponse>(getGetProfileUrl(), {
    ...options,
    method: 'GET',
  })
}
